# To get started with security, check out the documentation:
# https://symfony.com/doc/current/security.html
security:
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'

    # https://symfony.com/doc/current/security.html#b-configuring-how-users-are-loaded
    providers:
        database:
            entity:
                class: App\Entity\User
                property: idpId

    access_control:
        - { path: ^/logout/success, roles: PUBLIC_ACCESS }
        - { path: ^/saml/(login|discovery)$, roles: PUBLIC_ACCESS }
        - { path: ^/admin, roles: ROLE_ADMIN }
        - { path: ^, roles: ROLE_USER }

    role_hierarchy:
        ROLE_STUDENT: ROLE_USER
        ROLE_ADMIN: ROLE_USER

    firewalls:
        # disables authentication for assets and the profiler, adapt it according to your needs
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        login:
            pattern: ^/saml/(login|discovery|metadata.xml)$
        logout:
            pattern: ^/logout/success

        secured:
            pattern: ^/
            saml:
                provider: database
                user_creator: App\Security\User\UserCreator
                login_path: /saml/login
                check_path: /saml/login_check
                attribute_mapper: App\Security\User\AttributeMapper
                failure_path: /auth/error
            logout:
                path: /logout
                target: /logout/success
            provider: database

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon